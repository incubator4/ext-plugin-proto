// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RespOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Resp<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Resp<'a> {
  type Inner = Resp<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Resp<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_ACTION_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_ACTION: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Resp { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args RespArgs
  ) -> flatbuffers::WIPOffset<Resp<'bldr>> {
    let mut builder = RespBuilder::new(_fbb);
    if let Some(x) = args.action { builder.add_action(x); }
    builder.add_id(args.id);
    builder.add_action_type(args.action_type);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    self._tab.get::<u32>(Resp::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn action_type(&self) -> Action {
    self._tab.get::<Action>(Resp::VT_ACTION_TYPE, Some(Action::NONE)).unwrap()
  }
  #[inline]
  pub fn action(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Resp::VT_ACTION, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn action_as_stop(&self) -> Option<Stop<'a>> {
    if self.action_type() == Action::Stop {
      self.action().map(Stop::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn action_as_rewrite(&self) -> Option<Rewrite<'a>> {
    if self.action_type() == Action::Rewrite {
      self.action().map(Rewrite::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Resp<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_union::<Action, _>("action_type", Self::VT_ACTION_TYPE, "action", Self::VT_ACTION, false, |key, v, pos| {
        match key {
          Action::Stop => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Stop>>("Action::Stop", pos),
          Action::Rewrite => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Rewrite>>("Action::Rewrite", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct RespArgs {
    pub id: u32,
    pub action_type: Action,
    pub action: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for RespArgs {
  #[inline]
  fn default() -> Self {
    RespArgs {
      id: 0,
      action_type: Action::NONE,
      action: None,
    }
  }
}

pub struct RespBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RespBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(Resp::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_action_type(&mut self, action_type: Action) {
    self.fbb_.push_slot::<Action>(Resp::VT_ACTION_TYPE, action_type, Action::NONE);
  }
  #[inline]
  pub fn add_action(&mut self, action: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Resp::VT_ACTION, action);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RespBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RespBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Resp<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Resp<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Resp");
      ds.field("id", &self.id());
      ds.field("action_type", &self.action_type());
      match self.action_type() {
        Action::Stop => {
          if let Some(x) = self.action_as_stop() {
            ds.field("action", &x)
          } else {
            ds.field("action", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Action::Rewrite => {
          if let Some(x) = self.action_as_rewrite() {
            ds.field("action", &x)
          } else {
            ds.field("action", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("action", &x)
        },
      };
      ds.finish()
  }
}
