// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ReqOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Req<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Req<'a> {
  type Inner = Req<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Req<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SRC_IP: flatbuffers::VOffsetT = 6;
  pub const VT_METHOD: flatbuffers::VOffsetT = 8;
  pub const VT_PATH: flatbuffers::VOffsetT = 10;
  pub const VT_ARGS: flatbuffers::VOffsetT = 12;
  pub const VT_HEADERS: flatbuffers::VOffsetT = 14;
  pub const VT_CONF_TOKEN: flatbuffers::VOffsetT = 16;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Req { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ReqArgs<'args>
  ) -> flatbuffers::WIPOffset<Req<'bldr>> {
    let mut builder = ReqBuilder::new(_fbb);
    builder.add_conf_token(args.conf_token);
    if let Some(x) = args.headers { builder.add_headers(x); }
    if let Some(x) = args.args { builder.add_args(x); }
    if let Some(x) = args.path { builder.add_path(x); }
    if let Some(x) = args.src_ip { builder.add_src_ip(x); }
    builder.add_id(args.id);
    builder.add_method(args.method);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    self._tab.get::<u32>(Req::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn src_ip(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Req::VT_SRC_IP, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn method(&self) -> super::Method {
    self._tab.get::<super::Method>(Req::VT_METHOD, Some(super::Method::GET)).unwrap()
  }
  #[inline]
  pub fn path(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Req::VT_PATH, None)
  }
  #[inline]
  pub fn args(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry>>>>(Req::VT_ARGS, None)
  }
  #[inline]
  pub fn headers(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry>>>>(Req::VT_HEADERS, None)
  }
  #[inline]
  pub fn conf_token(&self) -> u32 {
    self._tab.get::<u32>(Req::VT_CONF_TOKEN, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Req<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("src_ip", Self::VT_SRC_IP, false)?
     .visit_field::<super::Method>("method", Self::VT_METHOD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("path", Self::VT_PATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::TextEntry>>>>("args", Self::VT_ARGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::TextEntry>>>>("headers", Self::VT_HEADERS, false)?
     .visit_field::<u32>("conf_token", Self::VT_CONF_TOKEN, false)?
     .finish();
    Ok(())
  }
}
pub struct ReqArgs<'a> {
    pub id: u32,
    pub src_ip: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub method: super::Method,
    pub path: Option<flatbuffers::WIPOffset<&'a str>>,
    pub args: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>>>,
    pub headers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>>>,
    pub conf_token: u32,
}
impl<'a> Default for ReqArgs<'a> {
  #[inline]
  fn default() -> Self {
    ReqArgs {
      id: 0,
      src_ip: None,
      method: super::Method::GET,
      path: None,
      args: None,
      headers: None,
      conf_token: 0,
    }
  }
}

pub struct ReqBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ReqBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(Req::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_src_ip(&mut self, src_ip: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Req::VT_SRC_IP, src_ip);
  }
  #[inline]
  pub fn add_method(&mut self, method: super::Method) {
    self.fbb_.push_slot::<super::Method>(Req::VT_METHOD, method, super::Method::GET);
  }
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Req::VT_PATH, path);
  }
  #[inline]
  pub fn add_args(&mut self, args: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::TextEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Req::VT_ARGS, args);
  }
  #[inline]
  pub fn add_headers(&mut self, headers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::TextEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Req::VT_HEADERS, headers);
  }
  #[inline]
  pub fn add_conf_token(&mut self, conf_token: u32) {
    self.fbb_.push_slot::<u32>(Req::VT_CONF_TOKEN, conf_token, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ReqBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ReqBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Req<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Req<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Req");
      ds.field("id", &self.id());
      ds.field("src_ip", &self.src_ip());
      ds.field("method", &self.method());
      ds.field("path", &self.path());
      ds.field("args", &self.args());
      ds.field("headers", &self.headers());
      ds.field("conf_token", &self.conf_token());
      ds.finish()
  }
}
