// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum RewriteOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Rewrite<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Rewrite<'a> {
  type Inner = Rewrite<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Rewrite<'a> {
  pub const VT_PATH: flatbuffers::VOffsetT = 4;
  pub const VT_HEADERS: flatbuffers::VOffsetT = 6;
  pub const VT_ARGS: flatbuffers::VOffsetT = 8;
  pub const VT_RESP_HEADERS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Rewrite { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args RewriteArgs<'args>
  ) -> flatbuffers::WIPOffset<Rewrite<'bldr>> {
    let mut builder = RewriteBuilder::new(_fbb);
    if let Some(x) = args.resp_headers { builder.add_resp_headers(x); }
    if let Some(x) = args.args { builder.add_args(x); }
    if let Some(x) = args.headers { builder.add_headers(x); }
    if let Some(x) = args.path { builder.add_path(x); }
    builder.finish()
  }


  #[inline]
  pub fn path(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Rewrite::VT_PATH, None)
  }
  #[inline]
  pub fn headers(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry>>>>(Rewrite::VT_HEADERS, None)
  }
  #[inline]
  pub fn args(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry>>>>(Rewrite::VT_ARGS, None)
  }
  #[inline]
  pub fn resp_headers(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry>>>>(Rewrite::VT_RESP_HEADERS, None)
  }
}

impl flatbuffers::Verifiable for Rewrite<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("path", Self::VT_PATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::TextEntry>>>>("headers", Self::VT_HEADERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::TextEntry>>>>("args", Self::VT_ARGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::TextEntry>>>>("resp_headers", Self::VT_RESP_HEADERS, false)?
     .finish();
    Ok(())
  }
}
pub struct RewriteArgs<'a> {
    pub path: Option<flatbuffers::WIPOffset<&'a str>>,
    pub headers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>>>,
    pub args: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>>>,
    pub resp_headers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::TextEntry<'a>>>>>,
}
impl<'a> Default for RewriteArgs<'a> {
  #[inline]
  fn default() -> Self {
    RewriteArgs {
      path: None,
      headers: None,
      args: None,
      resp_headers: None,
    }
  }
}

pub struct RewriteBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RewriteBuilder<'a, 'b> {
  #[inline]
  pub fn add_path(&mut self, path: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Rewrite::VT_PATH, path);
  }
  #[inline]
  pub fn add_headers(&mut self, headers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::TextEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Rewrite::VT_HEADERS, headers);
  }
  #[inline]
  pub fn add_args(&mut self, args: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::TextEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Rewrite::VT_ARGS, args);
  }
  #[inline]
  pub fn add_resp_headers(&mut self, resp_headers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::TextEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Rewrite::VT_RESP_HEADERS, resp_headers);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RewriteBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RewriteBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Rewrite<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Rewrite<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Rewrite");
      ds.field("path", &self.path());
      ds.field("headers", &self.headers());
      ds.field("args", &self.args());
      ds.field("resp_headers", &self.resp_headers());
      ds.finish()
  }
}
