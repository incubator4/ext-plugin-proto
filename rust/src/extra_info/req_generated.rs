// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ReqOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Req<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Req<'a> {
  type Inner = Req<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Req<'a> {
  pub const VT_INFO_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_INFO: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Req { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ReqArgs
  ) -> flatbuffers::WIPOffset<Req<'bldr>> {
    let mut builder = ReqBuilder::new(_fbb);
    if let Some(x) = args.info { builder.add_info(x); }
    builder.add_info_type(args.info_type);
    builder.finish()
  }


  #[inline]
  pub fn info_type(&self) -> Info {
    self._tab.get::<Info>(Req::VT_INFO_TYPE, Some(Info::NONE)).unwrap()
  }
  #[inline]
  pub fn info(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Req::VT_INFO, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn info_as_var(&self) -> Option<Var<'a>> {
    if self.info_type() == Info::Var {
      self.info().map(Var::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn info_as_req_body(&self) -> Option<ReqBody<'a>> {
    if self.info_type() == Info::ReqBody {
      self.info().map(ReqBody::init_from_table)
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn info_as_resp_body(&self) -> Option<RespBody<'a>> {
    if self.info_type() == Info::RespBody {
      self.info().map(RespBody::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for Req<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_union::<Info, _>("info_type", Self::VT_INFO_TYPE, "info", Self::VT_INFO, false, |key, v, pos| {
        match key {
          Info::Var => v.verify_union_variant::<flatbuffers::ForwardsUOffset<Var>>("Info::Var", pos),
          Info::ReqBody => v.verify_union_variant::<flatbuffers::ForwardsUOffset<ReqBody>>("Info::ReqBody", pos),
          Info::RespBody => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RespBody>>("Info::RespBody", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct ReqArgs {
    pub info_type: Info,
    pub info: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ReqArgs {
  #[inline]
  fn default() -> Self {
    ReqArgs {
      info_type: Info::NONE,
      info: None,
    }
  }
}

pub struct ReqBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ReqBuilder<'a, 'b> {
  #[inline]
  pub fn add_info_type(&mut self, info_type: Info) {
    self.fbb_.push_slot::<Info>(Req::VT_INFO_TYPE, info_type, Info::NONE);
  }
  #[inline]
  pub fn add_info(&mut self, info: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Req::VT_INFO, info);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ReqBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ReqBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Req<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Req<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Req");
      ds.field("info_type", &self.info_type());
      match self.info_type() {
        Info::Var => {
          if let Some(x) = self.info_as_var() {
            ds.field("info", &x)
          } else {
            ds.field("info", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Info::ReqBody => {
          if let Some(x) = self.info_as_req_body() {
            ds.field("info", &x)
          } else {
            ds.field("info", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Info::RespBody => {
          if let Some(x) = self.info_as_resp_body() {
            ds.field("info", &x)
          } else {
            ds.field("info", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("info", &x)
        },
      };
      ds.finish()
  }
}
