// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_METHOD: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_METHOD: u8 = 14;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_METHOD: [Method; 15] = [
  Method::GET,
  Method::HEAD,
  Method::POST,
  Method::PUT,
  Method::DELETE,
  Method::MKCOL,
  Method::COPY,
  Method::MOVE,
  Method::OPTIONS,
  Method::PROPFIND,
  Method::PROPPATCH,
  Method::LOCK,
  Method::UNLOCK,
  Method::PATCH,
  Method::TRACE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Method(pub u8);
#[allow(non_upper_case_globals)]
impl Method {
  pub const GET: Self = Self(0);
  pub const HEAD: Self = Self(1);
  pub const POST: Self = Self(2);
  pub const PUT: Self = Self(3);
  pub const DELETE: Self = Self(4);
  pub const MKCOL: Self = Self(5);
  pub const COPY: Self = Self(6);
  pub const MOVE: Self = Self(7);
  pub const OPTIONS: Self = Self(8);
  pub const PROPFIND: Self = Self(9);
  pub const PROPPATCH: Self = Self(10);
  pub const LOCK: Self = Self(11);
  pub const UNLOCK: Self = Self(12);
  pub const PATCH: Self = Self(13);
  pub const TRACE: Self = Self(14);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 14;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::GET,
    Self::HEAD,
    Self::POST,
    Self::PUT,
    Self::DELETE,
    Self::MKCOL,
    Self::COPY,
    Self::MOVE,
    Self::OPTIONS,
    Self::PROPFIND,
    Self::PROPPATCH,
    Self::LOCK,
    Self::UNLOCK,
    Self::PATCH,
    Self::TRACE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::GET => Some("GET"),
      Self::HEAD => Some("HEAD"),
      Self::POST => Some("POST"),
      Self::PUT => Some("PUT"),
      Self::DELETE => Some("DELETE"),
      Self::MKCOL => Some("MKCOL"),
      Self::COPY => Some("COPY"),
      Self::MOVE => Some("MOVE"),
      Self::OPTIONS => Some("OPTIONS"),
      Self::PROPFIND => Some("PROPFIND"),
      Self::PROPPATCH => Some("PROPPATCH"),
      Self::LOCK => Some("LOCK"),
      Self::UNLOCK => Some("UNLOCK"),
      Self::PATCH => Some("PATCH"),
      Self::TRACE => Some("TRACE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Method {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Method {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for Method {
    type Output = Method;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for Method {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Method {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Method {}
